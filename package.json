{
	"name": "text-power-tools",
	"displayName": "Text Power Tools",
	"description": "Text manipulation tools: filtering (grep), remove lines, insert number sequences and GUIDs, format content as table, change case, converting numbers and more. Great for finding information in logs and manipulating text.",
	"keywords": [
		"text",
		"tools",
		"logs",
		"grep",
		"utilities",
		"case",
		"TextFX",
		"converter",
		"converting",
		"lorem",
		"ipsum"
	],
	"version": "1.12.0",
	"publisher": "qcz",
	"private": true,
	"engines": {
		"vscode": "^1.26.0"
	},
	"license": "SEE LICENSE IN LICENSE.md",
	"icon": "images/icon.png",
	"repository": {
		"type": "git",
		"url": "https://github.com/qcz/vscode-text-power-tools.git"
	},
	"bugs": {
		"url": "https://github.com/qcz/vscode-text-power-tools/issues"
	},
	"categories": [
		"Other"
	],
	"galleryBanner": {
		"color": "#1e415e",
		"theme": "dark"
	},
	"activationEvents": [
		"onCommand:textPowerTools.filterLinesIncludingString",
		"onCommand:textPowerTools.filterLinesIncludingStringToNewEditor",
		"onCommand:textPowerTools.filterLinesMatchingRegex",
		"onCommand:textPowerTools.filterLinesMatchingRegexToNewEditor",
		"onCommand:textPowerTools.filterLinesNotIncludingString",
		"onCommand:textPowerTools.filterLinesNotIncludingStringToNewEditor",
		"onCommand:textPowerTools.filterLinesNotMatchingRegex",
		"onCommand:textPowerTools.filterLinesNotMatchingRegexToNewEditor",
		"onCommand:textPowerTools.extractInformation",
		"onCommand:textPowerTools.extractInformationToNewEditor",
		"onCommand:textPowerTools.countOccurrences",
		"onCommand:textPowerTools.countOccurrencesToNewEditor",
		"onCommand:textPowerTools.removeDuplicates",
		"onCommand:textPowerTools.removeBlankLines",
		"onCommand:textPowerTools.removeSurplusBlankLines",
		"onCommand:textPowerTools.removeControlCharacters",
		"onCommand:textPowerTools.insertDecimalNumbers",
		"onCommand:textPowerTools.insertDecimalNumbersStartingAt",
		"onCommand:textPowerTools.insertDecimalNumbersWithIncrements",
		"onCommand:textPowerTools.insertDecimalNumbersWithIncrementsStartingAt",
		"onCommand:textPowerTools.insertHexNumbers",
		"onCommand:textPowerTools.insertHexNumbersStartingAt",
		"onCommand:textPowerTools.insertHexNumbersWithIncrements",
		"onCommand:textPowerTools.insertHexNumbersWithIncrementsStartingAt",
		"onCommand:textPowerTools.insertLineNumbers",
		"onCommand:textPowerTools.insertLineNumbersFixedLength",
		"onCommand:textPowerTools.insertRelativeLineNumbers",
		"onCommand:textPowerTools.insertRelativeLineNumbersFixedLength",
		"onCommand:textPowerTools.padStart",
		"onCommand:textPowerTools.padStartWithCustomString",
		"onCommand:textPowerTools.padEnd",
		"onCommand:textPowerTools.padEndWithCustomString",
		"onCommand:textPowerTools.formatContentAsTableByTabulator",
		"onCommand:textPowerTools.formatContentAsTableBySemicolon",
		"onCommand:textPowerTools.formatContentAsTableByComma",
		"onCommand:textPowerTools.formatContentAsTableByPipe",
		"onCommand:textPowerTools.formatContentAsTableByCustomCharacter",
		"onCommand:textPowerTools.formatContentAsTableBySemicolonWithPadding",
		"onCommand:textPowerTools.formatContentAsTableByPipeWithPadding",
		"onCommand:textPowerTools.formatContentAsTableByCustomCharacterWithPadding",
		"onCommand:textPowerTools.generateGuid",
		"onCommand:textPowerTools.generateLoremIpsumSentence",
		"onCommand:textPowerTools.generateLoremIpsumFiveSentences",
		"onCommand:textPowerTools.generateLoremIpsumParagraph",
		"onCommand:textPowerTools.generateLoremIpsumFiveParagraphs",
		"onCommand:textPowerTools.generateMultipleGuids",
		"onCommand:textPowerTools.changeCaseToCamelCase",
		"onCommand:textPowerTools.changeCaseToPascalCase",
		"onCommand:textPowerTools.changeCaseToSnakeCase",
		"onCommand:textPowerTools.changeCaseToDashCase",
		"onCommand:textPowerTools.changeCaseToConstantCase",
		"onCommand:textPowerTools.changeCaseToDotCase",
		"onCommand:textPowerTools.changeCaseToSwapCase",
		"onCommand:textPowerTools.copySelectionsToNewEditor",
		"onCommand:textPowerTools.convertDecimalNumbersToHexadecimal",
		"onCommand:textPowerTools.convertHexadecimalNumbersToDecimal"
	],
	"main": "./out/extension",
	"contributes": {
		"commands": [
			{
				"command": "textPowerTools.filterLinesIncludingString",
				"category": "Text Power Tools",
				"title": "Filter lines including string"
			},
			{
				"command": "textPowerTools.filterLinesIncludingStringToNewEditor",
				"category": "Text Power Tools",
				"title": "Filter lines including string into a new editor"
			},
			{
				"command": "textPowerTools.filterLinesMatchingRegex",
				"category": "Text Power Tools",
				"title": "Filter lines matching a regex (grep)"
			},
			{
				"command": "textPowerTools.filterLinesMatchingRegexToNewEditor",
				"category": "Text Power Tools",
				"title": "Filter lines matching a regex (grep) into a new editor"
			},
			{
				"command": "textPowerTools.filterLinesNotIncludingString",
				"category": "Text Power Tools",
				"title": "Filter lines not including string"
			},
			{
				"command": "textPowerTools.filterLinesNotIncludingStringToNewEditor",
				"category": "Text Power Tools",
				"title": "Filter lines not including string into a new editor"
			},
			{
				"command": "textPowerTools.filterLinesNotMatchingRegex",
				"category": "Text Power Tools",
				"title": "Filter lines not matching a regex (grep)"
			},
			{
				"command": "textPowerTools.filterLinesNotMatchingRegexToNewEditor",
				"category": "Text Power Tools",
				"title": "Filter lines not matching a regex (grep) into a new editor"
			},
			{
				"command": "textPowerTools.extractInformation",
				"category": "Text Power Tools",
				"title": "Extract information from text"
			},
			{
				"command": "textPowerTools.extractInformationToNewEditor",
				"category": "Text Power Tools",
				"title": "Extract information from text into a new editor"
			},
			{
				"command": "textPowerTools.countOccurrences",
				"category": "Text Power Tools",
				"title": "Count line occurrences"
			},
			{
				"command": "textPowerTools.countOccurrencesToNewEditor",
				"category": "Text Power Tools",
				"title": "Count line occurrences into a new editor"
			},
			{
				"command": "textPowerTools.removeDuplicates",
				"category": "Text Power Tools",
				"title": "Remove duplicated lines"
			},
			{
				"command": "textPowerTools.removeBlankLines",
				"category": "Text Power Tools",
				"title": "Remove blank lines"
			},
			{
				"command": "textPowerTools.removeSurplusBlankLines",
				"category": "Text Power Tools",
				"title": "Remove surplus blank lines"
			},
			{
				"command": "textPowerTools.removeControlCharacters",
				"category": "Text Power Tools",
				"title": "Remove control characters"
			},
			{
				"command": "textPowerTools.insertDecimalNumbers",
				"category": "Text Power Tools",
				"title": "Insert decimal number sequence"
			},
			{
				"command": "textPowerTools.insertDecimalNumbersStartingAt",
				"category": "Text Power Tools",
				"title": "Insert decimal number sequence starting at..."
			},
			{
				"command": "textPowerTools.insertDecimalNumbersWithIncrements",
				"category": "Text Power Tools",
				"title": "Insert decimal number sequence with custom increments"
			},
			{
				"command": "textPowerTools.insertDecimalNumbersWithIncrementsStartingAt",
				"category": "Text Power Tools",
				"title": "Insert decimal number sequence with custom increments starting at..."
			},
			{
				"command": "textPowerTools.insertHexNumbers",
				"category": "Text Power Tools",
				"title": "Insert hex number sequence"
			},
			{
				"command": "textPowerTools.insertHexNumbersStartingAt",
				"category": "Text Power Tools",
				"title": "Insert hex number sequence starting at..."
			},
			{
				"command": "textPowerTools.insertHexNumbersWithIncrements",
				"category": "Text Power Tools",
				"title": "Insert hex number sequence with custom increments"
			},
			{
				"command": "textPowerTools.insertHexNumbersWithIncrementsStartingAt",
				"category": "Text Power Tools",
				"title": "Insert hex number sequence with custom increments starting at..."
			},
			{
				"command": "textPowerTools.insertLineNumbers",
				"category": "Text Power Tools",
				"title": "Insert line numbers"
			},
			{
				"command": "textPowerTools.insertLineNumbersFixedLength",
				"category": "Text Power Tools",
				"title": "Insert fixed length line numbers"
			},
			{
				"command": "textPowerTools.insertRelativeLineNumbers",
				"category": "Text Power Tools",
				"title": "Insert line numbers starting with 1"
			},
			{
				"command": "textPowerTools.insertRelativeLineNumbersFixedLength",
				"category": "Text Power Tools",
				"title": "Insert fixed line numbers starting with 1"
			},
			{
				"command": "textPowerTools.padStart",
				"category": "Text Power Tools",
				"title": "Pad start with default string"
			},
			{
				"command": "textPowerTools.padStartWithCustomString",
				"category": "Text Power Tools",
				"title": "Pad start with custom string"
			},
			{
				"command": "textPowerTools.padEnd",
				"category": "Text Power Tools",
				"title": "Pad end with default string"
			},
			{
				"command": "textPowerTools.padEndWithCustomString",
				"category": "Text Power Tools",
				"title": "Pad end with custom string"
			},
			{
				"command": "textPowerTools.formatContentAsTableByTabulator",
				"category": "Text Power Tools",
				"title": "Format content as table using tabulator as splitter"
			},
			{
				"command": "textPowerTools.formatContentAsTableBySemicolon",
				"category": "Text Power Tools",
				"title": "Format content as table using semicolon as splitter"
			},
			{
				"command": "textPowerTools.formatContentAsTableByComma",
				"category": "Text Power Tools",
				"title": "Format content as table using comma as splitter"
			},
			{
				"command": "textPowerTools.formatContentAsTableByPipe",
				"category": "Text Power Tools",
				"title": "Format content as table using pipe as splitter"
			},
			{
				"command": "textPowerTools.formatContentAsTableByCustomCharacter",
				"category": "Text Power Tools",
				"title": "Format content as table using custom string as splitter"
			},
			{
				"command": "textPowerTools.formatContentAsTableBySemicolonWithPadding",
				"category": "Text Power Tools",
				"title": "Format content as table using semicolon as splitter (with padding)"
			},
			{
				"command": "textPowerTools.formatContentAsTableByPipeWithPadding",
				"category": "Text Power Tools",
				"title": "Format content as table using pipe as splitter (with padding)"
			},
			{
				"command": "textPowerTools.formatContentAsTableByCustomCharacterWithPadding",
				"category": "Text Power Tools",
				"title": "Format content as table using custom string as splitter (with padding)"
			},
			{
				"command": "textPowerTools.generateGuid",
				"category": "Text Power Tools",
				"title": "Generate a GUID"
			},
			{
				"command": "textPowerTools.generateMultipleGuids",
				"category": "Text Power Tools",
				"title": "Generate multiple GUIDs"
			},
			{
				"command": "textPowerTools.generateLoremIpsumSentence",
				"category": "Text Power Tools",
				"title": "Generate a Lorem ipsum sentence"
			},
			{
				"command": "textPowerTools.generateLoremIpsumFiveSentences",
				"category": "Text Power Tools",
				"title": "Generate five Lorem ipsum sentences"
			},
			{
				"command": "textPowerTools.generateLoremIpsumParagraph",
				"category": "Text Power Tools",
				"title": "Generate a Lorem ipsum paragraph"
			},
			{
				"command": "textPowerTools.generateLoremIpsumFiveParagraphs",
				"category": "Text Power Tools",
				"title": "Generate five Lorem ipsum paragraphs"
			},
			{
				"command": "textPowerTools.changeCaseToCamelCase",
				"category": "Text Power Tools",
				"title": "Change case to camel case (camelCase)"
			},
			{
				"command": "textPowerTools.changeCaseToPascalCase",
				"category": "Text Power Tools",
				"title": "Change case to Pascal case (PascalCase)"
			},
			{
				"command": "textPowerTools.changeCaseToSnakeCase",
				"category": "Text Power Tools",
				"title": "Change case to snake case (snake_case)"
			},
			{
				"command": "textPowerTools.changeCaseToDashCase",
				"category": "Text Power Tools",
				"title": "Change case to dash case (dash-case)"
			},
			{
				"command": "textPowerTools.changeCaseToConstantCase",
				"category": "Text Power Tools",
				"title": "Change case to to constant case (CONSTANT_CASE)"
			},
			{
				"command": "textPowerTools.changeCaseToDotCase",
				"category": "Text Power Tools",
				"title": "Change text case to dot case (dot.case)"
			},
			{
				"command": "textPowerTools.changeCaseToSwapCase",
				"category": "Text Power Tools",
				"title": "Swap text case"
			},
			{
				"command": "textPowerTools.copySelectionsToNewEditor",
				"category": "Text Power Tools",
				"title": "Copy content of selections to a new editor"
			},
			{
				"command": "textPowerTools.convertHexadecimalNumbersToDecimal",
				"category": "Text Power Tools",
				"title": "Convert selected hexadecimal numbers to decimal"
			},
			{
				"command": "textPowerTools.convertDecimalNumbersToHexadecimal",
				"category": "Text Power Tools",
				"title": "Convert selected decimal numbers to hexadecimal"
			}
		],
		"configuration": {
			"type": "object",
			"title": "Text Power Tools",
			"properties": {
				"textPowerTools.caseSensitiveFiltering": {
					"type": "boolean",
					"default": false,
					"description": "Use case sensitive comparison when performing filter operations."
				},
				"textPowerTools.defaultPadString": {
					"type": "string",
					"description": "Default pad string for the 'Pad start' and 'Pad end' functions."
				},
				"textPowerTools.insertUppercaseHexNumbers": {
					"type": "boolean",
					"default": true,
					"description": "Insert uppercase hex numbers when using the 'Insert hex number' and other numeric functions."
				},
				"textPowerTools.insertUppercaseGuids": {
					"type": "boolean",
					"default": false,
					"description": "Insert uppercase GUIDs when using the 'Generate a GUID' or 'Generate multiple GUIDs' functions."
				},
				"textPowerTools.defaultGuidType": {
					"type": "string",
					"default": "alwaysAsk",
					"enum": [
						"alwaysAsk",
						"noDashes",
						"dashes",
						"dashesAndBraces",
						"cSharpGuidConstructor"
					],
					"description": "Type of the GUIDs inserted when using the 'Generate a GUID' or 'Generate multiple GUIDs' functions. By default the method will ask the type of GUID you want to generate."
				},
				"textPowerTools.loremIpsum.wordsPerSentence.min": {
					"type": "number",
					"minimum": 1,
					"default": 4,
					"description": "Minimum number of words in a sentence in generated Lorem ipsum texts."
				},
				"textPowerTools.loremIpsum.wordsPerSentence.max": {
					"type": "number",
					"minimum": 1,
					"default": 16,
					"description": "Maximum number of words in a sentence in generated Lorem ipsum texts."
				},
				"textPowerTools.loremIpsum.sentencesPerParagraph.min": {
					"type": "number",
					"minimum": 1,
					"default": 4,
					"description": "Minimum number of sentences in a paragraph in generated Lorem ipsum texts."
				},
				"textPowerTools.loremIpsum.sentencesPerParagraph.max": {
					"type": "number",
					"minimum": 1,
					"default": 8,
					"description": "Maximum number of sentences in a paragraph in generated Lorem ipsum texts."
				}
			}
		}
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./",
		"watch": "tsc -watch -p ./",
		"postinstall": "node ./node_modules/vscode/bin/install",
		"pretest": "npm run compile",
		"test": "node ./out/test/runTest.js"
	},
	"devDependencies": {
		"@types/mocha": "^2.2.42",
		"@types/node": "^7.0.43",
		"@types/node-uuid": "0.0.28",
		"@types/vscode": "^1.26.0",
		"tslint": "^5.20.1",
		"typescript": "^2.6.1"
	},
	"dependencies": {
		"change-case": "^3.0.2",
		"lorem-ipsum": "^2.0.3",
		"node-uuid": "^1.4.8",
		"vscode-test": "^1.4.0"
	}
}
